{"version":3,"sources":["App.js","serviceWorker.js","pages/Blogs.js","pages/Contact.js","pages/Gans.js","pages/Gitpages.js","pages/Classifier.js","pages/Coral.js","pages/Dsm.js","index.js","pics/fakes010296.png","fakes012000.png","pics/dsm.jpg","attempt_2_final.png","pics/fakes012000.png","react_logo.jpg","git_sh.png","pics/starion.jpg","pics/fakes012000-2.png"],"names":["App","className","Navbar","bg","expand","id","noGutters","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","NavDropdown","title","Item","Divider","Container","fluid","Row","style","height","Col","class","Boolean","window","location","hostname","match","Blogs","md","Carousel","src","gans","alt","Caption","Contact","exact","activeClassName","color","to","Gans","result","width","target","result2","result3_1","result3_2","Gitpages","react_logo","language","dracula","git_sh","Classifier","starion","Coral","Dsm","car","ReactDOM","render","StrictMode","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.24904e5d.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Bootstrap component imports\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Navbar bg=\"light\" expand=\"sm\" id=\"navbar\" noGutters>\n        <Navbar.Brand href=\"/\">Michaela Buchanan</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#about\">About Me</Nav.Link>\n            <NavDropdown title=\"Programming\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#blog\">Blogs</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.2\">Projects</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.3\">Resume</NavDropdown.Item>\n            </NavDropdown>\n            <NavDropdown title=\"Motorsport\" id=\"basic-nav-dropdown\">\n              <NavDropdown.Item href=\"#action/3.1\">Garage</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.2\">Projects</NavDropdown.Item>\n              <NavDropdown.Divider />\n              <NavDropdown.Item href=\"#action/3.3\">Calendar</NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link href=\"#contact\">Contact</Nav.Link>\n          </Nav>\n          Site still under construction, so all links might not work yet! Please check back soon :)\n        </Navbar.Collapse>\n      </Navbar>\n\n      <Container fluid id=\"parent\" noGutters>\n        <Row style={{height: 100}}>\n          <Col id=\"left\">\n            <div class=\"smoke\"></div>\n            <div class=\"desc\">\n              <p class=\"head\"><b>Programming</b></p>\n              <p class=\"body\"><a href=\"#blog\">Blogs</a>&ensp;&bull;&ensp;Projects&ensp;&bull;&ensp;Resume</p>\n            \n            </div>\n           \n          </Col>\n          <Col id=\"right\">\n            <div class=\"smoke\"></div>\n            <div class=\"desc\">\n              <p class=\"head\"><b>Motorsport</b></p>\n              <p class=\"body\">Garage&ensp;&bull;&ensp;Projects&ensp;&bull;&ensp;Calendar</p>\n            </div>\n\n          </Col>\n        </Row>\n\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n// React Bootstrap Components\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Carousel from 'react-bootstrap/Carousel'\n\n// pages\n\n\n// images\nimport gans from '../pics/fakes010296.png'\n\n// CSS for this page\nimport './Article.css';\n\nfunction Blogs() {\n  return (\n    <div className=\"App\">\n        <Navbar bg=\"light\" expand=\"sm\" id=\"navbar\" noGutters>\n            <Navbar.Brand href=\"/\">Michaela Buchanan</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#about\">About Me</Nav.Link>\n                <NavDropdown title=\"Programming\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#blog\">Blogs</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.2\">Projects</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.3\">Resume</NavDropdown.Item>\n                </NavDropdown>\n                <NavDropdown title=\"Motorsport\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\">Garage</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.2\">Projects</NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.3\">Calendar</NavDropdown.Item>\n                </NavDropdown>\n                <Nav.Link href=\"#contact\">Contact</Nav.Link>\n            </Nav>\n            Site still under construction, so all links might not work yet! Please check back soon :)\n            </Navbar.Collapse>\n        </Navbar>\n\n        <Container fluid id=\"parent1\" noGutters>\n            <Row style={{height:100}}>\n                <Col id=\"left1\" md={7}>\n                    <p id=\"c-head\">Most recent posts:</p>\n                    <Carousel id=\"car\">\n                        <Carousel.Item>\n                            <a href='#gans'>\n                                <img className=\"d-block w-100\" src={gans} alt=\"gans blog pic\" />\n                                <Carousel.Caption>\n                                    <h3 class=\"c-title\"><b>Generating New Cars Using GANs</b></h3>\n                                    <p class=\"c-d\">This blog post covers the basics of what GANs is and how you can use it to create images of nonexistent cars.</p>\n                                </Carousel.Caption>\n                            </a>\n                        </Carousel.Item>\n                    </Carousel>\n                </Col>\n\n                <Col id=\"right1\" md={5}> \n                    stuff...\n                </Col>\n            </Row>\n        </Container>\n\n\n\n    </div>\n\n  );\n}\nexport default Blogs;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport { HashLink as Link } from 'react-router-hash-link';\nimport TextField from '@material-ui/core/TextField';\n\nimport car from \"../pics/dsm.jpg\"\n\nimport './Article.css';\n\nfunction Contact() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"breadcrumb\"><code><NavLink exact activeClassName=\"active\" style={{color: 'lime'}} to=\"/\">Home</NavLink> &gt; Contact</code></p>\n\n        <p>Contact Me</p>\n        <p className=\"text\"><strong>Work Email:</strong> michaela.buchanan@markiiisys.com</p>\n        <p className=\"text\"><strong>Personal Email:</strong> mebucha2@gmail.com</p>\n        <p className=\"text\"><strong>Instagram:</strong> michaela.buchanan</p>\n\n{/*\n        <p className=\"contents\"><code><span className=\"blue\"><Link to=\"gans#overview\">Overview</Link></span> -&gt; <span className=\"blue\"><Link to=\"gans#pre\">Prerequisites</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#react\">Dataset</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#repo\">Progressive GANs</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#results\">Results</Link></span> -&gt;<span className=\"blue\"><Link to=\"gans#comments\"> Comments</Link></span></code></p>\n\n        <p id=\"overview\" className=\"subject\"><strong>Overview</strong></p>\n        <p className=\"text\">This article is less of an instructive guide and more of a record of my attempts at generating sports car images using Generative Adversarial Networks (GANs). So far, while the results have been promising, they have not been of the level of quality that I am hoping to achieve. Some of the largest challenges I'm encountering include the small dataset easily available for \"sport\" or \"performance\" oriented car images as well as the inherent difficulty of training GANs. </p>\n\n        <p id=\"pre\" className=\"subject\"><strong>Prerequisites</strong></p>\n        <ul className=\"text list\">\n            <li>Familiarity with Deep Learning, specifically GANs</li>\n            <li>Have Tensorflow-GPU 1.15 installed</li>\n            <li>Access to GPUs (for faster training)</li>\n          </ul>\n\n        <p id=\"react\" className=\"subject\"><strong>Dataset and Image Augmentation</strong></p>\n        <p className=\"text\">Most of the dataset used for the first attempt of training has been scraped from the Yandex search engine. To do this, I followed the guide linked <a href=\"https://gist.github.com/imneonizer/23d2faa12833716e22830f807b082a58\" target=\"_blank\"><span className=\"blue\">here</span></a>. Search phrases such as \"sports car\", \"race car\", and \"drift car\" were used to compile these images. Then, various image augmentations were performed to increase the number of images available for training. The guide linked <a href=\"https://towardsdatascience.com/complete-image-augmentation-in-opencv-31a6b02694f5\" target=\"_blank\"><span className=\"blue\">here</span></a> was used as a guide to performing these augmentations using <code>OpenCV</code>. I ended up using four different augmentations: vertical shift, horizontal shift, brightness changes, and zoom. This allowed me to increase my dataset size by four. However, after using this dataset, I am a bit concerned that some of these augmentations have an affect of the proportions of the cars generated by the network trained on these images so I need to further experiment with this strategy.</p>\n\n        <p className=\"text\">The dataset used for the second attempt at training was pulled from the Stanford Cars Dataset (linked <a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">here</span></a>). The purpose of this run of training is to see if much better results can be achieved with a larger, more consistent dataset. While this won't give me the \"sports car\" results I am looking for, this round of training will help guide my next steps to improving the model I am hoping to create, whether that be improving the dataset used or tweaking the model itself.</p>\n\n        <p id=\"repo\" className=\"subject\"><strong>Progressive GANs</strong></p>\n        <p className=\"text\">I decided to use a progressive GANs model for this experiment. The model I used was developed by a team at NVIDIA and is linked <a href=\"https://github.com/tkarras/progressive_growing_of_gans\" target=\"_blank\"><span className=\"blue\">here</span></a>. The idea behind this variation of GANs is that the generator and discriminator are both trained starting at a very low resoluiton. The resolution is progressively increased throughout the training process until it eventually reaches the desired resolution (1024x1024 in this case). This makes it easier to achieve training stability, especially in situations like this one where there are a lot of fine details for the model to figure out.</p>\n\n        <p id=\"results\" className=\"subject\"><strong>Results</strong></p>\n\n        <p className=\"text\">The table below outlines some of the results of using this variety of GANs as well as the final product achieved.</p>\n        <table className=\"text tb\" width=\"80%\">\n        <tr>\n          <th>Attempt</th>\n          <th>Dataset</th>\n          <th>Dataset Size</th>\n          <th>Resolution</th>\n          <th>Run Time</th>\n          <th>GPUs Used</th>\n        </tr>\n        <tr>\n          <th>1</th>\n          <th>Custom web scraped</th>\n          <th>9524</th>\n          <th>1024x1024</th>\n          <th>2d 20h 51m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>2</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>8144</th>\n          <th>1024x1024</th>\n          <th>2d 20h 56m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>3</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>16,185</th>\n          <th>1024x1024</th>\n          <th>TBD</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        </table>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 1</strong> training this model:</p>\n        <img src={result} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">While the top middle picture was pretty good, the rest of the photos produced were not satisfactory. I began to wonder if the uncurated scraped dataset I was using was part of the problem. To test this, I decided to run another round of training using the same algorithm, this time using the Stanford car dataset linked in the table above. While this may not produce the \"sports\" car images I was hoping for, this test will allow me to determine if the image quality in the dataset was holding the model back.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 2</strong> training this model:</p>\n        <img src={result2} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">Once again, only one of the pictures produced could pass as a car. These results seem to indicate that the dataset quality was not the main problem the model was facing. In this second attempt, I only used the training image dataset provided by Stanford in order to keep the dataset size roughly equivalent to the one used in the first attempt. However, I now wanted to find out if increasing the dataset size would significantly increase the quality of the output produced. Therefore, for my third attempt, I added the testing dataset to the training dataset I already had to produce a new dataset which was about twice the size of those used previously.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 3</strong> training this model:</p>\n        <p>Image will be placed here once training finishes!</p>\n\n\n\n        <p id=\"comments\" className=\"subject\"><strong>Comments</strong></p>\n\n        <form noValidate autoComplete=\"off\">\n      <TextField id=\"standard-multiline-flexible\" className=\"cbox\" multiline rowsMax={10} varient=\"outlined\" label=\"Type your comment here!\"/>\n    </form>\n*/}\n      </header>\n    </div>\n  );\n}\nexport default Contact;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport { HashLink as Link } from 'react-router-hash-link';\nimport TextField from '@material-ui/core/TextField';\n\nimport result from \"../fakes012000.png\"\nimport result2 from \"../attempt_2_final.png\"\nimport result3_1 from \"../pics/fakes010296.png\"\nimport result3_2 from \"../pics/fakes012000.png\"\nimport result4 from \"../pics/fakes012000-2.png\"\n\nimport comments from '../Comments'\n\nimport './Article.css';\n\nfunction Gans() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"breadcrumb\"><code><NavLink exact activeClassName=\"active\" style={{color: 'cyan'}} to=\"/\">Articles</NavLink> &gt; GANs</code></p>\n\n        <p>Generating New Sports Cars using GANs</p>\n\n        <img src={result} alt=\"react logo\" height=\"350\" width=\"500\"/>\n\n        <p className=\"contents\"><code><span className=\"blue\"><Link to=\"gans#overview\">Overview</Link></span> -&gt; <span className=\"blue\"><Link to=\"gans#pre\">Prerequisites</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#react\">Dataset</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#repo\">Progressive GANs</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#results\">Results</Link></span> -&gt;<span className=\"blue\"><Link to=\"gans#comments\"> Comments</Link></span></code></p>\n\n        <p id=\"overview\" className=\"subject\" style={{color: 'cyan'}}><strong>Overview</strong></p>\n        <p className=\"text\">This article is less of an instructive guide and more of a record of my attempts at generating sports car images using Generative Adversarial Networks (GANs). So far, while the results have been promising, they have not been of the level of quality that I am hoping to achieve. Some of the largest challenges I'm encountering include the small dataset easily available for \"sport\" or \"performance\" oriented car images as well as the inherent difficulty of training GANs. </p>\n\n        <p id=\"pre\" className=\"subject\" style={{color: 'cyan'}}><strong>Prerequisites</strong></p>\n        <ul className=\"text list\">\n            <li>Familiarity with Deep Learning, specifically GANs</li>\n            <li>Have Tensorflow-GPU 1.15 installed</li>\n            <li>Access to GPUs (for faster training)</li>\n          </ul>\n\n        <p id=\"react\" className=\"subject\" style={{color: 'lime'}}><strong>Dataset and Image Augmentation</strong></p>\n        <p className=\"text\">Most of the dataset used for the first attempt of training has been scraped from the Yandex search engine. To do this, I followed the guide linked <a href=\"https://gist.github.com/imneonizer/23d2faa12833716e22830f807b082a58\" target=\"_blank\"><span className=\"blue\">here</span></a>. Search phrases such as \"sports car\", \"race car\", and \"drift car\" were used to compile these images. Then, various image augmentations were performed to increase the number of images available for training. The guide linked <a href=\"https://towardsdatascience.com/complete-image-augmentation-in-opencv-31a6b02694f5\" target=\"_blank\"><span className=\"blue\">here</span></a> was used as a guide to performing these augmentations using <code>OpenCV</code>. I ended up using four different augmentations: vertical shift, horizontal shift, brightness changes, and zoom. This allowed me to create a dataset that was four times larger than the number of images I was able to scrape. However, after using this dataset, I am a bit concerned that some of these augmentations have an affect of the proportions of the cars generated by the network trained on these images so I need to further experiment with this strategy.</p>\n\n        <p className=\"text\">The dataset used for the second attempt at training was pulled from the Stanford Cars Dataset (linked <a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">here</span></a>). The purpose of this run of training is to see if much better results can be achieved with a larger, more consistent dataset. While this won't give me the \"sports car\" results I am looking for, this round of training will help guide my next steps to improving the model I am hoping to create, whether that be improving the dataset used or tweaking the model itself.</p>\n\n        <p id=\"repo\" className=\"subject\" style={{color: 'lime'}}><strong>Progressive GANs</strong></p>\n        <p className=\"text\">I decided to use a progressive GANs model for this experiment. The model I used was developed by a team at NVIDIA and is linked <a href=\"https://github.com/tkarras/progressive_growing_of_gans\" target=\"_blank\"><span className=\"blue\">here</span></a>. The idea behind this variation of GANs is that the generator and discriminator are both trained starting at a very low resoluiton. The resolution is progressively increased throughout the training process until it eventually reaches the desired resolution (1024x1024 in this case). This makes it easier to achieve training stability, especially in situations like this one where there are a lot of fine details for the model to figure out.</p>\n\n        <p id=\"results\" className=\"subject\" style={{color: 'lime'}}><strong>Results</strong></p>\n\n        <p className=\"text\">The table below outlines some of the results of using this variety of GANs as well as the final product achieved.</p>\n        <table className=\"text tb\" width=\"80%\">\n        <tr>\n          <th>Attempt</th>\n          <th>Dataset</th>\n          <th>Dataset Size</th>\n          <th>Resolution</th>\n          <th>Run Time</th>\n          <th>GPUs Used</th>\n        </tr>\n        <tr>\n          <th>1</th>\n          <th>Custom web scraped</th>\n          <th>9524</th>\n          <th>1024x1024</th>\n          <th>2d 20h 51m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>2</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>8144</th>\n          <th>1024x1024</th>\n          <th>2d 20h 56m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>3</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>16,185</th>\n          <th>1024x1024</th>\n          <th>2d 20h 55m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>4</th>\n          <th>Kaggle 60,000 Car dataset (<a href=\"https://www.kaggle.com/prondeau/the-car-connection-picture-dataset\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>64467</th>\n          <th>1024x1024</th>\n          <th>4d 20h 55m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        </table>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 1</strong> training this model:</p>\n        <img src={result} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">While the top middle picture was pretty good, the rest of the photos produced were not satisfactory. I began to wonder if the uncurated scraped dataset I was using was part of the problem. To test this, I decided to run another round of training using the same algorithm, this time using the Stanford car dataset linked in the table above. While this may not produce the \"sports\" car images I was hoping for, this test will allow me to determine if the image quality in the dataset was holding the model back.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 2</strong> training this model:</p>\n        <img src={result2} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">Once again, only one of the pictures produced could pass as a car. These results seem to indicate that the dataset quality was not the main problem the model was facing. In this second attempt, I only used the training image dataset provided by Stanford in order to keep the dataset size roughly equivalent to the one used in the first attempt. However, I now wanted to find out if increasing the dataset size would significantly increase the quality of the output produced. Therefore, for my third attempt, I added the testing dataset to the training dataset I already had to produce a new dataset which was about twice the size of those used previously.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on round 10296 of <strong>attempt 3</strong> training this model:</p>\n        <img src={result3_1} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 3</strong> training this model:</p>\n        <img src={result3_2} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">It seems that using a larger dataset led to an increase in image quality. However, it seems that the images produced by the GANs in the middle of training were better than those produced at the final tick. The next steps for this project will include creating a more sports car exclusive dataset of a similar size to the one used in attempt 3 as well as potentially tweaking the model itself.</p>\n\n{/*\n\n        <p id=\"comments\" className=\"subject\"><strong>Comments</strong></p>\n\n        <form noValidate autoComplete=\"off\">\n      <TextField id=\"standard-multiline-flexible\" className=\"cbox\" multiline rowsMax={10} varient=\"outlined\" label=\"Type your comment here!\"/>\n    </form>\n*/}\n      </header>\n    </div>\n  );\n}\nexport default Gans;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { dracula } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { dark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { HashLink as Link } from 'react-router-hash-link';\n\nimport react_logo from \"../react_logo.jpg\"\nimport git_sh from \"../git_sh.png\"\n\nimport './Article.css';\n\nconst code1 =  '1\\tcd your-username.github.io\\n2\\tnpx create-react-app your-react-project-className\\n3\\tnpm install gh-pages --save-dev'\n\nconst code2 = '1\\t{\\n2\\t\"name\": \"michaelabuchanan\",\\n3\\t\"homepage\": \"http://michaelabuchanan.github.io\",\\n4\\t\"version\": \"0.1.0\",\\n5\\t\"private\": true,\\n6\\t\"dependencies\": {\\n7\\t\"@material-ui/core\": \"^4.11.0\",\\n8\\t\"@testing-library/jest-dom\": \"^4.2.4\",\\n9\\t\"@testing-library/react\": \"^9.3.2\",\\n10\\t\"@testing-library/user-event\": \"^7.1.2\",\\n11\\t\"react\": \"^16.13.1\",\\n12\\t\"react-dom\": \"^16.13.1\",\\n13\\t\"react-router-dom\": \"^5.2.0\",\\n14\\t\"react-scripts\": \"3.4.3\",\\n15\\t\"react-syntax-highlighter\": \"^13.5.0\"\\n16\\t},\\n17\\t\"scripts\": {\\n18\\t\"start\": \"react-scripts start\",\\n19\\t\"predeploy\": \"npm run build\",\\n20\\t\"deploy\": \"gh-pages -d build\",\\n21\\t\"build\": \"react-scripts build\",\\n22\\t\"test\": \"react-scripts test\",\\n23\\t\"eject\": \"react-scripts eject\"\\n24\\t},\\n25\\t...'\n\nconst code3 = '1\\tnpm run deploy'\n\nfunction Gitpages() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"breadcrumb\"><code><NavLink exact activeClassName=\"active\" style={{color: 'cyan'}} to=\"/\">Articles</NavLink> &gt; Git-Pages</code></p>\n\n        <p><strong>How to host your React app on Git-Pages for free </strong></p>\n        <img src={react_logo} alt=\"react logo\" height=\"350\" width=\"500\"/>\n        <p className=\"contents\"><code><span className=\"blue\"><Link to=\"gitpages#overview\">Overview</Link></span> -&gt; <span className=\"blue\"><Link to=\"gitpages#pre\">Prerequisites</Link></span> -&gt; <span className=\"green\"><Link to=\"gitpages#react\">Setup React Project</Link></span> -&gt; <span className=\"green\"><Link to=\"gitpages#repo\">Setup GitHub Repo</Link></span> -&gt; <span className=\"blue\"><Link to=\"gitpages#comments\">Comments</Link></span></code></p>\n\n        <p id=\"overview\" className=\"subject\"><strong>Overview</strong></p>\n        <p class=\"text\">Are you looking for a free hosting service for your React application? If the application is for personal or development use, then GitPages may be a great alternative to more traditional website hosting services. </p>\n\n        <p id=\"pre\" className=\"subject\"><strong>Prerequisites</strong></p>\n          <ul className=\"text list\">\n            <li>Installed Node.js, NPM, and NPX</li>\n            <li>Installed React</li>\n            <li>Have a Github account</li>\n          </ul>\n\n        <p id=\"react\" className=\"subject\"><strong>Setting Up Your React Project</strong></p>\n\n        <p className=\"text\">First, create a GitHub repo for your website. Using the name <code>your-username.github.io</code> is recommended. Open a terminal and clone your new repo. Now run the following commands to create your React project and install <code>gh-pages</code>. </p>\n          <p className=\"text\"><SyntaxHighlighter className=\"codebox\" language=\"bash\" style={dracula}>\n          {code1}\n</SyntaxHighlighter></p>\n\n        <p className=\"text\">After <code>gh-pages</code> has successfully been installed, open the file <code>package.json</code> which should have been created in your directory by the above <code>create-react-app</code> command. Then, add the <code>homepage</code>, <code>predeploy</code>, and <code>deploy</code> lines shown below on lines 3, 19, and 20 to your file. For the <code>homepage</code> field, enter the url <code>http://your-git-username.github.io</code>.</p>\n        <p class=\"text\"><SyntaxHighlighter className=\"codebox\" language=\"json\" style={dracula}>\n          {code2}\n</SyntaxHighlighter></p>\n\n        <p className=\"text\">Now you should be able to run the <code>npm</code> command below to build the website content for GitHub to display. You should see \"Published\" after this command runs if it runs successfully.</p>\n        <p className=\"text\"><SyntaxHighlighter className=\"codebox\" language=\"json\" style={dracula}>\n          {code3}\n</SyntaxHighlighter></p>\n\n        <p id=\"repo\" className=\"subject\"><strong>Setting Up Your Github Repository</strong></p>\n\n        <p className=\"text\">Your website is now build but you may still need to change some settings in your GitHub repo to make it viewable. If you go to <code>Settings</code> in your repo and scroll down, you should find a section titled <code>GitHub Pages</code>. It should look something like the screenshot below. </p>\n\n        <img src={git_sh} alt=\"react logo\" height=\"400\" width=\"700\"/>\n        <p className=\"text\">Make sure the <code>Branch</code> option has the <code>gh-pages</code> selected and leave the directory it looks for at / (root). After confirming these settings, you should be able to go to the link shown in these settings to see your published page. Note that it may take a few minutes for the site to be published so don't be alarmed if it doesn't appear immidiately.</p>\n\n\n        <p id=\"comments\" className=\"subject\"><strong>Comments</strong></p>\n\n      </header>\n    </div>\n  );\n}\nexport default Gitpages;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport { HashLink as Link } from 'react-router-hash-link';\nimport TextField from '@material-ui/core/TextField';\n\nimport starion from \"../pics/starion.jpg\"\n\nimport './Article.css';\n\nfunction Classifier() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"breadcrumb\"><code><NavLink exact activeClassName=\"active\" style={{color: 'cyan'}} to=\"/\">Articles</NavLink> &gt; Classifier</code></p>\n\n        <p>Sports Car Classification with Small Datasets</p>\n\n        <img src={starion} alt=\"Mitsubishi Starion race car\" height=\"350\" width=\"550\"/>\n\n        <p className=\"contents\"><code><span className=\"blue\"><Link to=\"gans#overview\">Overview</Link></span> -&gt; <span className=\"blue\"><Link to=\"gans#pre\">Prerequisites</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#react\">Dataset</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#repo\">Progressive GANs</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#results\">Results</Link></span> -&gt;<span className=\"blue\"><Link to=\"gans#comments\"> Comments</Link></span></code></p>\n\n        <p id=\"overview\" className=\"subject\"><strong>Overview</strong></p>\n        <p className=\"text\">While working on my <NavLink exact activeClassName=\"active\" style={{color: 'cyan'}} to=\"gans\">GANs car generation project</NavLink>, I began to realize how important the dataset used was to the final product. While I had access to large quality datasets of car images, they were mostly normal cars instead of the sports cars I needed for this project. Therefore, I decided to create a classifer in order to make it easier to filter sports cars out of existing datasets like the <a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">Stanford Cars dataset</span></a>. Hopefully this will make it possible to create a more specified but still large (>10,000 image) dataset for use in my GANs project.  </p>\n\n\n        <p id=\"pre\" className=\"subject\"><strong>Prerequisites</strong></p>\n        <ul className=\"text list\">\n            <li>Familiarity with Deep Learning, specifically RCNN classifiers</li>\n            <li>Have Pytorch</li>\n            <li>Access to GPUs (for faster training)</li>\n          </ul>\n\n        <p id=\"react\" className=\"subject\"><strong>Dataset</strong></p>\n        <p className=\"text\">In order to create the dataset I used for training, I used a class-sorted variation of the Stanf</p>\n{/*\n        <p id=\"repo\" className=\"subject\"><strong>Progressive GANs</strong></p>\n        <p className=\"text\">I decided to use a progressive GANs model for this experiment. The model I used was developed by a team at NVIDIA and is linked <a href=\"https://github.com/tkarras/progressive_growing_of_gans\" target=\"_blank\"><span className=\"blue\">here</span></a>. The idea behind this variation of GANs is that the generator and discriminator are both trained starting at a very low resoluiton. The resolution is progressively increased throughout the training process until it eventually reaches the desired resolution (1024x1024 in this case). This makes it easier to achieve training stability, especially in situations like this one where there are a lot of fine details for the model to figure out.</p>\n\n        <p id=\"results\" className=\"subject\"><strong>Results</strong></p>\n\n        <p className=\"text\">The table below outlines some of the results of using this variety of GANs as well as the final product achieved.</p>\n        <table className=\"text tb\" width=\"80%\">\n        <tr>\n          <th>Attempt</th>\n          <th>Dataset</th>\n          <th>Dataset Size</th>\n          <th>Resolution</th>\n          <th>Run Time</th>\n          <th>GPUs Used</th>\n        </tr>\n        <tr>\n          <th>1</th>\n          <th>Custom web scraped</th>\n          <th>9524</th>\n          <th>1024x1024</th>\n          <th>2d 20h 51m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>2</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>8144</th>\n          <th>1024x1024</th>\n          <th>2d 20h 56m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>3</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>16,185</th>\n          <th>1024x1024</th>\n          <th>TBD</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        </table>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 1</strong> training this model:</p>\n        <img src={result} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">While the top middle picture was pretty good, the rest of the photos produced were not satisfactory. I began to wonder if the uncurated scraped dataset I was using was part of the problem. To test this, I decided to run another round of training using the same algorithm, this time using the Stanford car dataset linked in the table above. While this may not produce the \"sports\" car images I was hoping for, this test will allow me to determine if the image quality in the dataset was holding the model back.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 2</strong> training this model:</p>\n        <img src={result2} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">Once again, only one of the pictures produced could pass as a car. These results seem to indicate that the dataset quality was not the main problem the model was facing. In this second attempt, I only used the training image dataset provided by Stanford in order to keep the dataset size roughly equivalent to the one used in the first attempt. However, I now wanted to find out if increasing the dataset size would significantly increase the quality of the output produced. Therefore, for my third attempt, I added the testing dataset to the training dataset I already had to produce a new dataset which was about twice the size of those used previously.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 3</strong> training this model:</p>\n        <p>Image will be placed here once training finishes!</p>\n\n\n\n        <p id=\"comments\" className=\"subject\"><strong>Comments</strong></p>\n\n        <form noValidate autoComplete=\"off\">\n      <TextField id=\"standard-multiline-flexible\" className=\"cbox\" multiline rowsMax={10} varient=\"outlined\" label=\"Type your comment here!\"/>\n    </form>\n    */}\n      </header>\n    </div>\n  );\n}\nexport default Classifier;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport { HashLink as Link } from 'react-router-hash-link';\nimport TextField from '@material-ui/core/TextField';\n\nimport result from \"../fakes012000.png\"\n\nimport './Article.css';\n\nfunction Coral() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"breadcrumb\"><code><NavLink exact activeClassName=\"active\" style={{color: 'cyan'}} to=\"/\">Articles</NavLink> &gt; GANs</code></p>\n\n        <p>Using a Raspberry Pi and Google Coral for AI Edge Inference</p>\n        <p className=\"text\">Coming soon!</p>\n        {/*\n        <img src={result} alt=\"react logo\" height=\"350\" width=\"500\"/>\n\n        <p className=\"contents\"><code><span className=\"blue\"><Link to=\"gans#overview\">Overview</Link></span> -&gt; <span className=\"blue\"><Link to=\"gans#pre\">Prerequisites</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#react\">Dataset</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#repo\">Progressive GANs</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#results\">Results</Link></span> -&gt;<span className=\"blue\"><Link to=\"gans#comments\"> Comments</Link></span></code></p>\n\n        <p id=\"overview\" className=\"subject\"><strong>Overview</strong></p>\n        <p className=\"text\">This article is less of an instructive guide and more of a record of my attempts at generating sports car images using Generative Adversarial Networks (GANs). So far, while the results have been promising, they have not been of the level of quality that I am hoping to achieve. Some of the largest challenges I'm encountering include the small dataset easily available for \"sport\" or \"performance\" oriented car images as well as the inherent difficulty of training GANs. </p>\n\n        <p id=\"pre\" className=\"subject\"><strong>Prerequisites</strong></p>\n        <ul className=\"text list\">\n            <li>Familiarity with Deep Learning, specifically GANs</li>\n            <li>Have Tensorflow-GPU 1.15 installed</li>\n            <li>Access to GPUs (for faster training)</li>\n          </ul>\n\n        <p id=\"react\" className=\"subject\"><strong>Dataset and Image Augmentation</strong></p>\n        <p className=\"text\">Most of the dataset used for the first attempt of training has been scraped from the Yandex search engine. To do this, I followed the guide linked <a href=\"https://gist.github.com/imneonizer/23d2faa12833716e22830f807b082a58\" target=\"_blank\"><span className=\"blue\">here</span></a>. Search phrases such as \"sports car\", \"race car\", and \"drift car\" were used to compile these images. Then, various image augmentations were performed to increase the number of images available for training. The guide linked <a href=\"https://towardsdatascience.com/complete-image-augmentation-in-opencv-31a6b02694f5\" target=\"_blank\"><span className=\"blue\">here</span></a> was used as a guide to performing these augmentations using <code>OpenCV</code>. I ended up using four different augmentations: vertical shift, horizontal shift, brightness changes, and zoom. This allowed me to increase my dataset size by four. However, after using this dataset, I am a bit concerned that some of these augmentations have an affect of the proportions of the cars generated by the network trained on these images so I need to further experiment with this strategy.</p>\n\n        <p className=\"text\">The dataset used for the second attempt at training was pulled from the Stanford Cars Dataset (linked <a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">here</span></a>). The purpose of this run of training is to see if much better results can be achieved with a larger, more consistent dataset. While this won't give me the \"sports car\" results I am looking for, this round of training will help guide my next steps to improving the model I am hoping to create, whether that be improving the dataset used or tweaking the model itself.</p>\n\n        <p id=\"repo\" className=\"subject\"><strong>Progressive GANs</strong></p>\n        <p className=\"text\">I decided to use a progressive GANs model for this experiment. The model I used was developed by a team at NVIDIA and is linked <a href=\"https://github.com/tkarras/progressive_growing_of_gans\" target=\"_blank\"><span className=\"blue\">here</span></a>. The idea behind this variation of GANs is that the generator and discriminator are both trained starting at a very low resoluiton. The resolution is progressively increased throughout the training process until it eventually reaches the desired resolution (1024x1024 in this case). This makes it easier to achieve training stability, especially in situations like this one where there are a lot of fine details for the model to figure out.</p>\n\n        <p id=\"results\" className=\"subject\"><strong>Results</strong></p>\n\n        <p className=\"text\">The table below outlines some of the results of using this variety of GANs as well as the final product achieved.</p>\n        <table className=\"text tb\" width=\"80%\">\n        <tr>\n          <th>Attempt</th>\n          <th>Dataset</th>\n          <th>Dataset Size</th>\n          <th>Resolution</th>\n          <th>Run Time</th>\n          <th>GPUs Used</th>\n        </tr>\n        <tr>\n          <th>1</th>\n          <th>Custom web scraped</th>\n          <th>9524</th>\n          <th>1024x1024</th>\n          <th>2d 20h 51m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>2</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>8144</th>\n          <th>1024x1024</th>\n          <th>2d 20h 56m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>3</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>16,185</th>\n          <th>1024x1024</th>\n          <th>TBD</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        </table>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 1</strong> training this model:</p>\n        <img src={result} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">While the top middle picture was pretty good, the rest of the photos produced were not satisfactory. I began to wonder if the uncurated scraped dataset I was using was part of the problem. To test this, I decided to run another round of training using the same algorithm, this time using the Stanford car dataset linked in the table above. While this may not produce the \"sports\" car images I was hoping for, this test will allow me to determine if the image quality in the dataset was holding the model back.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 2</strong> training this model:</p>\n        <img src={result2} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">Once again, only one of the pictures produced could pass as a car. These results seem to indicate that the dataset quality was not the main problem the model was facing. In this second attempt, I only used the training image dataset provided by Stanford in order to keep the dataset size roughly equivalent to the one used in the first attempt. However, I now wanted to find out if increasing the dataset size would significantly increase the quality of the output produced. Therefore, for my third attempt, I added the testing dataset to the training dataset I already had to produce a new dataset which was about twice the size of those used previously.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 3</strong> training this model:</p>\n        <p>Image will be placed here once training finishes!</p>\n\n\n\n        <p id=\"comments\" className=\"subject\"><strong>Comments</strong></p>\n\n        <form noValidate autoComplete=\"off\">\n      <TextField id=\"standard-multiline-flexible\" className=\"cbox\" multiline rowsMax={10} varient=\"outlined\" label=\"Type your comment here!\"/>\n    </form>\n*/}\n      </header>\n    </div>\n  );\n}\nexport default Coral;\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\nimport { HashLink as Link } from 'react-router-hash-link';\nimport TextField from '@material-ui/core/TextField';\n\nimport car from \"../pics/dsm.jpg\"\n\nimport './Article.css';\n\nfunction Dsm() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p className=\"breadcrumb\"><code><NavLink exact activeClassName=\"active\" style={{color: 'cyan'}} to=\"/\">Articles</NavLink> &gt; GANs</code></p>\n\n        <p>1990 Mitsubishi Eclipse GSX</p>\n        <p className=\"text\">Coming soon!</p>\n\n        <img src={car} alt=\"react logo\" height=\"400\" width=\"500\"/>\n{/*\n        <p className=\"contents\"><code><span className=\"blue\"><Link to=\"gans#overview\">Overview</Link></span> -&gt; <span className=\"blue\"><Link to=\"gans#pre\">Prerequisites</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#react\">Dataset</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#repo\">Progressive GANs</Link></span> -&gt; <span className=\"green\"><Link to=\"gans#results\">Results</Link></span> -&gt;<span className=\"blue\"><Link to=\"gans#comments\"> Comments</Link></span></code></p>\n\n        <p id=\"overview\" className=\"subject\"><strong>Overview</strong></p>\n        <p className=\"text\">This article is less of an instructive guide and more of a record of my attempts at generating sports car images using Generative Adversarial Networks (GANs). So far, while the results have been promising, they have not been of the level of quality that I am hoping to achieve. Some of the largest challenges I'm encountering include the small dataset easily available for \"sport\" or \"performance\" oriented car images as well as the inherent difficulty of training GANs. </p>\n\n        <p id=\"pre\" className=\"subject\"><strong>Prerequisites</strong></p>\n        <ul className=\"text list\">\n            <li>Familiarity with Deep Learning, specifically GANs</li>\n            <li>Have Tensorflow-GPU 1.15 installed</li>\n            <li>Access to GPUs (for faster training)</li>\n          </ul>\n\n        <p id=\"react\" className=\"subject\"><strong>Dataset and Image Augmentation</strong></p>\n        <p className=\"text\">Most of the dataset used for the first attempt of training has been scraped from the Yandex search engine. To do this, I followed the guide linked <a href=\"https://gist.github.com/imneonizer/23d2faa12833716e22830f807b082a58\" target=\"_blank\"><span className=\"blue\">here</span></a>. Search phrases such as \"sports car\", \"race car\", and \"drift car\" were used to compile these images. Then, various image augmentations were performed to increase the number of images available for training. The guide linked <a href=\"https://towardsdatascience.com/complete-image-augmentation-in-opencv-31a6b02694f5\" target=\"_blank\"><span className=\"blue\">here</span></a> was used as a guide to performing these augmentations using <code>OpenCV</code>. I ended up using four different augmentations: vertical shift, horizontal shift, brightness changes, and zoom. This allowed me to increase my dataset size by four. However, after using this dataset, I am a bit concerned that some of these augmentations have an affect of the proportions of the cars generated by the network trained on these images so I need to further experiment with this strategy.</p>\n\n        <p className=\"text\">The dataset used for the second attempt at training was pulled from the Stanford Cars Dataset (linked <a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">here</span></a>). The purpose of this run of training is to see if much better results can be achieved with a larger, more consistent dataset. While this won't give me the \"sports car\" results I am looking for, this round of training will help guide my next steps to improving the model I am hoping to create, whether that be improving the dataset used or tweaking the model itself.</p>\n\n        <p id=\"repo\" className=\"subject\"><strong>Progressive GANs</strong></p>\n        <p className=\"text\">I decided to use a progressive GANs model for this experiment. The model I used was developed by a team at NVIDIA and is linked <a href=\"https://github.com/tkarras/progressive_growing_of_gans\" target=\"_blank\"><span className=\"blue\">here</span></a>. The idea behind this variation of GANs is that the generator and discriminator are both trained starting at a very low resoluiton. The resolution is progressively increased throughout the training process until it eventually reaches the desired resolution (1024x1024 in this case). This makes it easier to achieve training stability, especially in situations like this one where there are a lot of fine details for the model to figure out.</p>\n\n        <p id=\"results\" className=\"subject\"><strong>Results</strong></p>\n\n        <p className=\"text\">The table below outlines some of the results of using this variety of GANs as well as the final product achieved.</p>\n        <table className=\"text tb\" width=\"80%\">\n        <tr>\n          <th>Attempt</th>\n          <th>Dataset</th>\n          <th>Dataset Size</th>\n          <th>Resolution</th>\n          <th>Run Time</th>\n          <th>GPUs Used</th>\n        </tr>\n        <tr>\n          <th>1</th>\n          <th>Custom web scraped</th>\n          <th>9524</th>\n          <th>1024x1024</th>\n          <th>2d 20h 51m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>2</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>8144</th>\n          <th>1024x1024</th>\n          <th>2d 20h 56m</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        <tr>\n          <th>3</th>\n          <th>Stanford dataset (<a href=\"http://ai.stanford.edu/~jkrause/cars/car_dataset.html\" target=\"_blank\"><span className=\"blue\">link</span></a>)</th>\n          <th>16,185</th>\n          <th>1024x1024</th>\n          <th>TBD</th>\n          <th>4xNVIDIA V100</th>\n        </tr>\n        </table>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 1</strong> training this model:</p>\n        <img src={result} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">While the top middle picture was pretty good, the rest of the photos produced were not satisfactory. I began to wonder if the uncurated scraped dataset I was using was part of the problem. To test this, I decided to run another round of training using the same algorithm, this time using the Stanford car dataset linked in the table above. While this may not produce the \"sports\" car images I was hoping for, this test will allow me to determine if the image quality in the dataset was holding the model back.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 2</strong> training this model:</p>\n        <img src={result2} alt=\"react logo\" height=\"600\" width=\"900\"/>\n\n        <p className=\"text\">Once again, only one of the pictures produced could pass as a car. These results seem to indicate that the dataset quality was not the main problem the model was facing. In this second attempt, I only used the training image dataset provided by Stanford in order to keep the dataset size roughly equivalent to the one used in the first attempt. However, I now wanted to find out if increasing the dataset size would significantly increase the quality of the output produced. Therefore, for my third attempt, I added the testing dataset to the training dataset I already had to produce a new dataset which was about twice the size of those used previously.<br /></p>\n\n        <p className=\"text\">Here are the fake images that were produced on the last round of <strong>attempt 3</strong> training this model:</p>\n        <p>Image will be placed here once training finishes!</p>\n\n\n\n        <p id=\"comments\" className=\"subject\"><strong>Comments</strong></p>\n\n        <form noValidate autoComplete=\"off\">\n      <TextField id=\"standard-multiline-flexible\" className=\"cbox\" multiline rowsMax={10} varient=\"outlined\" label=\"Type your comment here!\"/>\n    </form>\n*/}\n      </header>\n    </div>\n  );\n}\nexport default Dsm;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Route, HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Blogs from './pages/Blogs'\nimport Contact from './pages/Contact'\nimport Gans from './pages/Gans'\nimport Gitpages from './pages/Gitpages'\nimport Classifier from './pages/Classifier'\nimport Coral from './pages/Coral'\nimport Dsm from './pages/Dsm'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={App}/>\n            <Route path=\"/contact\" component={Contact}/>\n            <Route path=\"/gans\" component={Gans}/>\n            <Route path=\"/gitpages\" component={Gitpages}/>\n            <Route path=\"/class\" component={Classifier}/>\n            <Route path=\"/blog\" component={Blogs}/>\n            <Route path=\"/coral\" component={Coral}/>\n            <Route path=\"/dsm\" component={Dsm}/>\n          </div>\n        </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/fakes010296.4621a287.png\";","module.exports = __webpack_public_path__ + \"static/media/fakes012000.7fa05220.png\";","module.exports = __webpack_public_path__ + \"static/media/dsm.68bb1f06.jpg\";","module.exports = __webpack_public_path__ + \"static/media/attempt_2_final.6bc3283f.png\";","module.exports = __webpack_public_path__ + \"static/media/fakes012000.be1cab51.png\";","module.exports = __webpack_public_path__ + \"static/media/react_logo.7bdceb15.jpg\";","module.exports = __webpack_public_path__ + \"static/media/git_sh.43f253c1.png\";","module.exports = __webpack_public_path__ + \"static/media/starion.77d8ff06.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fakes012000-2.6d73352f.png\";"],"sourceRoot":""}